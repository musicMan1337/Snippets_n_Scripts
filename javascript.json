{
  // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "template": {
    "prefix": "",
    "body": [

    ],
    "description": "template"
  },
  "Const Function": {
    "prefix": "cfunction",
    "body": [
      "const ${1:name} = ($2) => {$0}",
    ],
    "description": "Const Function"
  },
  "Const Promise": {
    "prefix": "promise",
    "body": [
      "const ${1:name} = new Promise((resolve, reject) => {",
      "  console.log('${1:name} Promise Start');",
      "  $0",
      "});"
    ],
    "description": "Const Promise"
  },
  "Comment Block": {
    "prefix": "commentblock",
    "body": [
      "/*",
      "|--------------------------------------------------------------------------",
      "| ${1:BLOCK TITLE}",
      "|--------------------------------------------------------------------------",
      "|",
      "| ${2:Start comment block here!}",
      "*/",
    ],
    "description": "Comment Block"
  },
  "JSON Stringify": {
    "prefix": "jsonstringify",
    "body": [
      "JSON.stringify(${1:object}, null, 2)",
    ],
    "description": "JSON Stringify"
  },
  "Function": {
    "prefix": "function",
    "body": [
      "function ${1:name}(${2:params}) {",
      "  $0",
      "}",
    ],
    "description": "Function"
  },
  "slice()": {
    "prefix": "slice",
    "body": [
      "${1:variable}.slice(${2:cutIndex}, ${3:cutIndex2})",
    ],
    "description": "slice()"
  },
  "splice()": {
    "prefix": "splice",
    "body": [
      "${1:variable}.splice(${2:cutIndex}, ${3:amount}, ${4:insert})",
    ],
    "description": "splice()"
  },
  "Ternary Operator": {
    "prefix": "ternary",
    "body": [
      "${1:condition} ? ${2:ifTrue} : ${3:ifFalse}",
    ],
    "description": "Ternary Operator"
  },
  // *************************************** //
  // *************************************** //
  // ********** REACT PropTypes ************ //
  "PropTypeTemplate": {
    "prefix": "",
    "body": [

    ],
    "description": "PropTypeTemplate"
  },
  "PTC Custom": {
    "prefix": "ptccustom",
    "body": [
      "  ${1:prop}: (props, ${1:prop}) => {",
      "    const prop = props[${1:prop}];",
      "    //isRequired check",
      "    if(!prop) {",
      "      return new Error(`\"${1:prop}\" is required in ${2:componentName}.js ~ Validation Failed`);",
      "    };",
      "    // check type",
      "    if (typeof prop != '${3:typeOf}') {",
      "      return new Error(`Invalid prop => \\${prop} is expected to be a \"${3:typeOf}\" in ${2:componentName}.js ~ \\${typeof prop} found.`);",
      "    };",
      "    // custom check",
      "    if(==> stuff <==) {",
      "      return new Error(`Invalid prop => \\${prop} should be ==> stuff <== in ${2:componentName}.js ~ \\${prop} found.`);",
      "    };",
      "  },",
    ],
    "description": "PTC Custom"
  },
  "PTC URL": {
    "prefix": "ptcurl",
    "body": [
      "  ${1:url}: (props, ${1:url}) => {",
      "    const prop = props[url];",
      "    //isRequired check",
      "    if(!prop) {",
      "      return new Error(`\"${1:url}\" is required in ${2:componentName}.js ~ Validation Failed`);",
      "    };",
      "    // check type",
      "    if (typeof prop != 'string') {",
      "      return new Error(`Invalid prop => \\${prop} is expected to be a \"string\" in ${2:componentName}.js ~ \\${typeof prop} found.`);",
      "    };",
      "    // custom check url format",
      "    if (prop.length < 5 || !prop.match(new RegExp(/^https?:\\/\\//))) {",
      "      return new Error(`Invalid prop => \\${prop} must be min length 5 and begin \"http(s)://\" in ${2:componentName}.js ~ Validation Failed.`);",
      "    };",
      "  },",
    ],
    "description": "PTC URL"
  },
  // *************************************** //
  // *************************************** //
  // *************** REACT ***************** //
  "reactTemplate": {
    "prefix": "",
    "body": [

    ],
    "description": "reactTemplate"
  },
  "Enzyme Setup": {
    "prefix": "impenzyme",
    "body": [
      "import { configure } from 'enzyme';",
      "import Adapter from 'enzyme-adapter-react-16';",
      "",
      "configure({ adapter: new Adapter() });",
    ],
    "description": "Enzyme Setup"
  },
  "Key Prop": {
    "prefix": "key",
    "body": [
      "key={$1}$0"
    ],
    "description": "Key Prop"
  },
  "onClick": {
    "prefix": "onclick",
    "body": [
      "onClick={() => ${1:function}}$0"
    ],
    "description": "onClick"
  },
  "onChange": {
    "prefix": "onchange",
    "body": [
      "onChange={e => ${1:function}(e.target.value)}$0"
    ],
    "description": "onChange"
  },
  "onSubmit": {
    "prefix": "onsubmit",
    "body": [
      "onSubmit={e => ${1:function}(e, ${2:formData})}$0"
    ],
    "description": "onSubmit"
  },
  "Import Child": {
    "prefix": "impch",
    "body": [
      "import ${2:Child} from './${1:folder}/${2:Child}';$0"
    ],
    "description": "Import Child"
  },
  "Import Parent": {
    "prefix": "impp",
    "body": [
      "import ${1:Parent} from '../${1:Parent}';$0"
    ],
    "description": "Import Parent"
  },
  "Import Sibling": {
    "prefix": "imps",
    "body": [
      "import ${1:Sibling} from './${1:Sibling}';$0"
    ],
    "description": "Import Sibling"
  },
  "Import Component": {
    "prefix": "impc",
    "body": [
      "import ${1:Component} from './components/${1:Component}';$0"
    ],
    "description": "Import Component"
  },
  "Index React": {
    "prefix": "!index",
    "body": [
      "import React from 'react';",
      "import ReactDOM from 'react-dom';",
      "import './styles/global.scss';",
      "import App from './App';",
      "",
      "ReactDOM.render(<App />, document.getElementById('root'))",
    ],
    "description": "Index React"
  },
  "Router Index React": {
    "prefix": "!router",
    "body": [
      "import React from 'react';",
      "import ReactDOM from 'react-dom';",
      "import './styles/global.scss';",
      "import { BrowserRouter } from 'react-router-dom';",
      "import App from './App';",
      "",
      "ReactDOM.render(",
      "  <BrowserRouter>",
      "    <App />",
      "  </BrowserRouter>,",
      "  document.getElementById('root')",
      ");",
    ],
    "description": "Router Index React"
  },
  "App React": {
    "prefix": "!app",
    "body": [
      "import React from 'react';",
      "",
      "const App = () => {",
      "  const stuffHere = 'WOW!!!';",
      "",
      "  return (",
      "    <main className=\"App\">",
      "      {stuffHere}",
      "    </main>",
      "  );",
      "};",
      "",
      "export default App;",
    ],
    "description": "App React"
  },
  // *************************************** //
  // *************************************** //
  // ************* API Calls *************** //
  "Fetch API": {
    "prefix": "apifetch",
    "body": [
      "function apiFetch(...args) {",
      "  let error;",
      "  return fetch(...args)",
      "    .then(res => {",
      "      if (!res.ok) {",
      "        error = {code: res.status};",
      "        if (!res.headers.get('content-type').includes('json')) {",
      "          error.message = res.statusText;",
      "          return Promise.reject(error);",
      "        }",
      "      }",
      "      return res.json();",
      "    })",
      "    .then(data => {",
      "      if (error) {",
      "        error.message = data.message;",
      "        return Promise.reject(error);",
      "      }",
      "      return data;",
      "    });",
      "};",
    ],
    "description": "Fetch API"
  },
  "GET API": {
    "prefix": "apiget",
    "body": [
      "function get${1:Item}(${2:params}) {",
      "  return apiFetch(`\\${BASE_URL}/${3:endpoint}`)",
      "}",
    ],
    "description": "GET API"
  },
  "POST API": {
    "prefix": "apipost",
    "body": [
      "function add${1:Item}(apiBody) {",
      "  return apiFetch(`\\${BASE_URL}/${2:endpoint}`, {",
      "    method: 'POST',",
      "    headers: {",
      "      'Content-Type': 'application/json',",
      "    },",
      "    body: apiBody",
      "  })",
      "}",
    ],
    "description": "POST API"
  },
  "PATCH API": {
    "prefix": "apipatch",
    "body": [
      "function edit${1:Item}(apiBody, id) {",
      "  return apiFetch(`\\${BASE_URL}/${2:endpoint}/${id}`, {",
      "    method: 'PATCH',",
      "    headers: {",
      "      'Content-Type': 'application/json',",
      "    },",
      "    body: apiBody",
      "  })",
      "}",
    ],
    "description": "PATCH API"
  },
  "DELETE API": {
    "prefix": "apidelete",
    "body": [
      "function delete${1:Item}(id) {",
      "  return apiFetch(`\\${BASE_URL}/${2:endpoint}/${id}`, {",
      "    method: 'DELETE',",
      "  })",
      "}",
    ],
    "description": "DELETE API"
  },
  // *************************************** //
  // *************************************** //
  // ************** jQuery ***************** //
  "jQtemplate": {
    "prefix": "",
    "body": [

    ],
    "description": "jQtemplate"
  },
  "On Trigger": {
    "prefix": "jqon",
    "body": [
      "\\$('${1:selector}').on('${2:trigger}', '${3:target}', ${4:event} => {",
      "  ${4:event}.preventDefault();",
      "  $0",
      "});",
    ],
    "description": "On Trigger"
  },
  "On Click": {
    "prefix": "jqclick",
    "body": [
      "\\$('${1:selector}').click(${2:event} => {",
      "  $0",
      "});",
    ],
    "description": "On Click"
  },
  "On Submit": {
    "prefix": "jqsubmit",
    "body": [
      "\\$('${1:selector}').submit(${2:event} => {",
      "  ${2:event}.preventDefault();",
      "  $0",
      "});",
    ],
    "description": "On Submit"
  },
  // *************************************** //
  // *************************************** //
  // ************** NPM ******************** //
  "WebPack Config": {
    "prefix": "webpackconfig",
    "body": [
      "const HtmlWebpackPlugin = require('html-webpack-plugin');",
      "",
      "module.exports = {",
      "  entry: './src/scripts/index.js',",
      "  output: {",
      "    path: __dirname + '/dist',",
      "    filename: 'index_bundle.js'",
      "  },",
      "  mode: 'development',",
      "  plugins: [",
      "    new HtmlWebpackPlugin({",
      "      template: './src/index.html',",
      "    })",
      "  ],",
      "  module: {",
      "    rules: [",
      "      {",
      "        test: /\\.css$/,",
      "        use: [",
      "          'style-loader',",
      "          'css-loader'",
      "        ]",
      "      },",
      "      {",
      "        test: /\\.(png|svg|jpg|gif)$/,",
      "        use: [",
      "          'file-loader'",
      "        ]",
      "      }",
      "    ]",
      "  }",
      "};",    ],
    "description": "WebPack Config"
  },
}